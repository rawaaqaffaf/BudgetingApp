{
  "_args": [
    [
      {
        "raw": "standalone",
        "scope": null,
        "escapedName": "standalone",
        "name": "standalone",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "C:\\Users\\rawa\\Desktop\\budgeting\\e2e"
    ]
  ],
  "_from": "standalone@latest",
  "_id": "standalone@0.0.1",
  "_inCache": true,
  "_location": "/standalone",
  "_npmUser": {
    "name": "shinout",
    "email": "shinout310@gmail.com"
  },
  "_npmVersion": "1.1.69",
  "_phantomChildren": {},
  "_requested": {
    "raw": "standalone",
    "scope": null,
    "escapedName": "standalone",
    "name": "standalone",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#DEV:/",
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/standalone/-/standalone-0.0.1.tgz",
  "_shasum": "267cb54bfe978b66df3a9d64eff5390bc2e6fde0",
  "_shrinkwrap": null,
  "_spec": "standalone",
  "_where": "C:\\Users\\rawa\\Desktop\\budgeting\\e2e",
  "author": {
    "name": "SHIN Suzuki",
    "email": "shinout310@gmail.com"
  },
  "dependencies": {},
  "description": "Creates an isolated thread / process in JavaScript (Node.js and modern browsers)",
  "devDependencies": {},
  "directories": {},
  "dist": {
    "shasum": "267cb54bfe978b66df3a9d64eff5390bc2e6fde0",
    "tarball": "https://registry.npmjs.org/standalone/-/standalone-0.0.1.tgz"
  },
  "engines": {
    "node": ">=0.6.1"
  },
  "keywords": [
    "child process",
    "WebWorker",
    "isolate",
    "standalone",
    "asynchronous"
  ],
  "main": "standalone.js",
  "maintainers": [
    {
      "name": "shinout",
      "email": "shinout310@gmail.com"
    }
  ],
  "name": "standalone",
  "optionalDependencies": {},
  "readme": "standalone\n==========\n\ndescription\n------------\nCreates an isolated thread / process in JavaScript (Node.js and modern browsers).\n\nAPI at a glance\n----------------\n\nmaster.js\n\n    standalone(\"worker.js\", function(obj) {\n\n      obj.getXXXByYYY(\"YYY\", function(err, XXX) {\n        console.log(XXX); // \"XXX by YYY\"\n      });\n    });\n\n\nworker.js\n    \n    var obj = {\n      getXXXByYYY : function(YYY) {\n        return \"XXX\" + \" by \" + YYY;\n      }\n    };\n\n    standalone(obj);\n\nIn master.js, we can use \"getXXXByYYY\" asynchronously, while the originally defined API is synchronous.\n\nIn Node.js, **standalone** spawns a child process.\n\nIn browsers, **standalone** creates a WebWorker instance.\n\nInstallation\n------------\n\n    $ npm install standalone\n\nIn browsers, \n\n    <script type=\"text/javascript\" src=\"/path/to/standalone.js\"></script>\n\nThen the variable \"standalone\" is set to global.\n\nIn worker.js (when running in Web Worker),\n\n    importScripts('/path/to/standalone.js');\n\ncan import the variable.\n\n\nIn Node.js,\n\n    var standalone = require('standalone');\n\n\nAPI documentation\n------------------\n\n### standalone(filename, callback, debugMode) ###\nCreates a worker from **filename**.\n**callback** is called after the target object is created.\n\n**callback** is passed one argument. The target object which has asynchronous APIs.\n\nmaster.js\n\n    var master = standalone(\"worker.js\", function(obj) {\n      obj.add(123, 456, function(e, v) {\n        // e: null if no error, error object if error occurred.\n        // v: result\n      });\n    })\n\nif **debugMode** is true, verbose logs appear in console.\n\nReturns master object.\n\n### standalone(obj, debugMode) ###\n\nSet an object **obj** to create asynchronous APIs from.\n\n\nworker.js\n\n    var worker = standalone({\n      add : function(a, b) { return a + b },\n      sub : function(a, b) { return a - b }\n    });\n\nif **debugMode** is true, verbose logs appear in console.\n\nReturns worker object.\n\n### master.closeWorker(callback) ###\nCloses the worker instance.\n\n**callback** is called after **worker.onClose** is executed.\n\n    master.closeWorker(function(e, msg) {\n      // e: null if no error, error object if error occurred.\n      // v: the value worker.onClose() returned.\n    });\n\n\n### worker.onClose ###\nFunction to be called before closing.\n\n    worker.onClose = function() {\n      db.save();\n      return 1;\n    };\n\nThe returned value is passed to the callback function in **master.closeWorker(callback)**\n\n\nLICENSE\n-------\n(The MIT License)\n\nCopyright (c) 2012 SHIN Suzuki <shinout310@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
  "readmeFilename": "README.md",
  "repository": {
    "url": ""
  },
  "scripts": {
    "test": "node test/test.js"
  },
  "version": "0.0.1"
}
