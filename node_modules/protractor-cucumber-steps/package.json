{
  "_args": [
    [
      {
        "raw": "protractor-cucumber-steps",
        "scope": null,
        "escapedName": "protractor-cucumber-steps",
        "name": "protractor-cucumber-steps",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "C:\\Users\\rawa\\Desktop\\e2e"
    ]
  ],
  "_from": "protractor-cucumber-steps@latest",
  "_id": "protractor-cucumber-steps@1.3.1",
  "_inCache": true,
  "_location": "/protractor-cucumber-steps",
  "_nodeVersion": "9.5.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/protractor-cucumber-steps_1.3.1_1531089814800_0.6017623243748789"
  },
  "_npmUser": {
    "name": "marketionist",
    "email": "marketionist@gmail.com"
  },
  "_npmVersion": "5.6.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "protractor-cucumber-steps",
    "scope": null,
    "escapedName": "protractor-cucumber-steps",
    "name": "protractor-cucumber-steps",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#DEV:/",
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/protractor-cucumber-steps/-/protractor-cucumber-steps-1.3.1.tgz",
  "_shasum": "fcabb02f25ff6ba0ef36c73387ecde009d368f49",
  "_shrinkwrap": null,
  "_spec": "protractor-cucumber-steps",
  "_where": "C:\\Users\\rawa\\Desktop\\e2e",
  "author": {
    "name": "Dmytro Shpakovskyi"
  },
  "bugs": {
    "url": "https://github.com/Marketionist/protractor-cucumber-steps/issues"
  },
  "dependencies": {},
  "description": "Cucumber steps (step definitions) written with Protractor for e2e tests",
  "devDependencies": {
    "chai": "^3.5.0",
    "chai-as-promised": "^6.0.0",
    "cucumber": "^4.1.0",
    "cucumber-pretty": "0.0.5",
    "eslint": "^3.17.1",
    "node-testing-server": "^1.2.2",
    "protractor": "^5.3.1",
    "protractor-cucumber-framework": "^4.2.0"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-nz95zhSpVXfFx9i1uscz2QnIHoktRm9vppVkCswB8ZhJcYLakVepV38nBKXFcCljFyYr2Iy18XaeKSlKtFhLdQ==",
    "shasum": "fcabb02f25ff6ba0ef36c73387ecde009d368f49",
    "tarball": "https://registry.npmjs.org/protractor-cucumber-steps/-/protractor-cucumber-steps-1.3.1.tgz",
    "fileCount": 20,
    "unpackedSize": 77822,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbQpOWCRA9TVsSAnZWagAA5RIP/3QKqJ3sy0rPVFl2HIOy\n4NZpMm8pWLBwUmPnMmDGefRQI/B0c66Etd2wgqjyTjvAWk/248VGjL2PDs1A\nJ/W6vBvU/kXnX6W3crTNtpQhp3Ia9OsRw7JCvuXSBuqaOcULmb/eHohwjZyz\nB5dwm2QPYeag7pz0AFrN2v9dxa26Rc0eFUSx9KipPjDHz+j07vZ3xcCrbx+o\npx4nOupR2+7TpatoU/pvsR8tO1Bi+thm5OmARGa/VvkatQNSB7lfqyH8iA/N\n0xAhk8CD23bRo3y52bVmNjmrLLTwI8u6k/udJvYbH4qEuxPFg7HHDc2PvSCP\n1E8TaFDGEyB60BM9Yj9w9mmOj3UzK13ReDP7I9ATavL2SyL9CMSjbeJIpnbS\nkM+5Jh7U5rnZFF3nzsQcy+EjsavOtOc68KVcRFr4O3PaXmlnFs/zSRjW1s3K\n0Nfdber+GDcX9i9znsliunXcXLV6SbNoAHfshOdj9Qe7tSMH+v/ZidVpHepr\n0a7cUV7l8/BoX3hpv3U5rS7JXrsn6cDhUM+iHrBDNMW8v4ivsXrPSaxBT0TW\nLLGVnULds1axoTX/VDnrU0bUnbcW59g8wFW1AbPxGPYo2YOrb8ZStLnl+48G\n+RAsfqodQU7QyhM9KwJyy3Lpag/k/LU1FZwuQ0sw7wHJileWDIBreCLJMFAN\nssnr\r\n=dXyx\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "engines": {
    "node": ">=6.9.x"
  },
  "gitHead": "85cbf76bbadc48d0bc8014b359902c7a94bc61fb",
  "homepage": "https://github.com/Marketionist/protractor-cucumber-steps#readme",
  "keywords": [
    "protractor cucumber steps",
    "protractor-cucumber-steps",
    "cucumber steps",
    "cucumber step definitions",
    "protractor plugin",
    "test",
    "testing",
    "automated tests",
    "e2e tests",
    "end-to-end tests",
    "webdriver",
    "webdriverjs",
    "selenium",
    "protractor",
    "cucumber",
    "cucumberjs",
    "cucumber-js",
    "gherkin",
    "bdd"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "marketionist",
      "email": "marketionist@gmail.com"
    }
  ],
  "name": "protractor-cucumber-steps",
  "optionalDependencies": {},
  "readme": "# protractor-cucumber-steps\n\n[![Build Status](https://travis-ci.org/Marketionist/protractor-cucumber-steps.svg?branch=master)](https://travis-ci.org/Marketionist/protractor-cucumber-steps)\n[![npm version](https://img.shields.io/npm/v/protractor-cucumber-steps.svg)](https://www.npmjs.com/package/protractor-cucumber-steps)\n[![NPM License](https://img.shields.io/npm/l/protractor-cucumber-steps.svg)](https://github.com/Marketionist/protractor-cucumber-steps/blob/master/LICENSE)\n\nCucumber steps (step definitions) written with Protractor for end-to-end tests\n\n## Supported versions\n[Node.js](http://nodejs.org/):\n- 6.x\n- 7.x\n- 8.x\n- 9.x\n- 10.x\n\n[Protractor](https://www.npmjs.com/package/protractor):\n- 4.x\n- 5.x\n\n[Cucumber](https://www.npmjs.com/package/cucumber):\n- 2.x\n- 3.x\n- 4.x\n\n## Installation\nTo install this package and add it to your package.json just run:\n```\nnpm install protractor-cucumber-steps --save-dev\n```\n\n## Importing and enabling\nThis package is used as plugin with\n[protractor](https://www.npmjs.com/package/protractor) and\n[protractor-cucumber-framework](https://www.npmjs.com/package/protractor-cucumber-framework).\nIt is quite simple to use - to get access to all Cucumber steps defined in this\nplugin just:\n- add the path to protractor-cucumber-steps in `cucumberOpts: {` `require: ...` inside `protractor.conf.js`;\n- add the path to your page object file in `params: {` `pageObjects: ...` inside `protractor.conf.js`.\n\nHere is a short config example for `protractor.conf.js`:\n\n```javascript\nexports.config = {\n    // set to \"custom\" instead of cucumber\n    framework: 'custom',\n\n    // path relative to the current config file\n    frameworkPath: require.resolve('protractor-cucumber-framework'),\n\n    // require feature files\n    specs: [\n        'path/to/feature/files/**/*.feature' // accepts a glob\n    ],\n\n    cucumberOpts: {\n        // require step definitions\n        require: [\n            './node_modules/protractor-cucumber-steps/index.js', // path to protractor-cucumber-steps\n            'path/to/your/step/definitions/**/*.steps.js' // accepts a glob\n        ]\n    },\n\n    // Custom parameters can be specified here\n    params: {\n        pageObjects: require('./page_objects/index.js') // path to your page object file\n    }\n};\n```\n\nAlso see [enhanced example of `protractor.conf.js`](https://github.com/Marketionist/protractor-cucumber-steps/blob/master/tests/protractor.conf.js)\n\n## List of predefined steps\nYou can see the example of how to use predefined steps in [`test.feature`](https://github.com/Marketionist/protractor-cucumber-steps/blob/master/tests/specs/test.feature)\n\n### When steps\n- `I go to URL \"...\"` - Open a site (by its URL provided in \"\" as a string) in the current browser window/tab\n- `I go to \"...\".\"...\"` - Open a site (by its URL provided in **\"page\".\"object\"**) in the current browser window/tab\n- `I go to ... from ... page` - Open a site (by its URL provided in **object** from **page**) in the current browser window/tab\n- `I reload the page` - Reload current page\n- `I click \"...\".\"...\"` - Click on any element (provided in **\"page\".\"object\"** as CSS or XPath selector)\n- `I click ... from ... page` - Click on any element (provided in **object** from **page** as CSS or XPath selector)\n- `I wait and click \"...\".\"...\"` - Wait for 300 ms and then click on any element (provided in **\"page\".\"object\"** as CSS or XPath selector)\n- `I wait and click ... from ... page` - Wait for 300 ms and then click on any element (provided in **object** from **page** as CSS or XPath selector)\n- `I click \"...\".\"...\" if present` - Click on any element (provided in **\"page\".\"object\"** as CSS or XPath selector) only if it is present on the page\n- `I click ... from page ... if present` - Click on any element (provided in **object** from **page** as CSS or XPath selector) only if it is present on the page\n- `I double click \"...\".\"...\"` - Double click on any element (provided in **\"page\".\"object\"** as CSS or XPath selector)\n- `I double click ... from ... page` - Double click on any element (provided in **object** from **page** as CSS or XPath selector)\n- `I wait for (\\d+) ms` - Wait for provided amount of time (in milliseconds). Maximum value is 300000 (equals to 5 minutes)\n- `I wait for \"...\".\"...\" to be present` - Wait for element (provided in **\"page\".\"object\"** as CSS or XPath selector) to be present on the page (by default waits for 5000 ms, this time can be changed by specifying `params.customTimeout` inside `protractor.conf.js` - see the [example](https://github.com/Marketionist/protractor-cucumber-steps/blob/master/tests/protractor.conf.js))\n- `I wait for ... from ... page to be present` - Wait for element (provided in **object** from **page** as CSS or XPath selector) to be present on the page (by default waits for 5000 ms, this time can be changed by specifying `params.customTimeout` inside `protractor.conf.js` - see the [example](https://github.com/Marketionist/protractor-cucumber-steps/blob/master/tests/protractor.conf.js))\n- `I type \"...\" in \"...\".\"...\"` - Type any text (provided in \"\" as a string) in the input field (provided in **\"page\".\"object\"** as CSS or XPath selector)\n- `I type \"...\" in ... from ... page` - Type any text (provided in \"\" as a string) in the input field (provided in **object** from **page** as CSS or XPath selector)\n- `I type \"...\".\"...\" in \"...\".\"...\"` - Type any text (provided in **\"page1\".\"object1\"**) in the input field (provided in **\"page2\".\"object2\"** as CSS or XPath selector)\n- `I type ... from ... page in ... from ... page` - Type any text (provided in **object1** from **page1**) in the input field (provided in **object2** from **page2** as CSS or XPath selector)\n- `I move to \"...\".\"...\"` - Move the mouse pointer over any element (hover with cursor an element provided in **\"page\".\"object\"** as CSS or XPath selector)\n- `I move to ... from ... page` - Move the mouse pointer over any element (hover with cursor an element provided in **object** from **page** as CSS or XPath selector)\n- `I move to \"...\".\"...\" with an offset of x: (\\d+)px, y: (\\d+)px` - Move the mouse pointer over any element (hover with cursor an element provided in **\"page\".\"object\"** as CSS or XPath selector) with an offset of x: ...px, y: ...px\n- `I move to ... from ... page with an offset of x: (\\d+)px, y: (\\d+)px` - Move the mouse pointer over any element (hover with cursor an element provided in **object** from **page** as CSS or XPath selector) with an offset of x: ...px, y: ...px\n- `I switch to \"...\".\"...\" frame` - Switch the context to iframe (provided in **\"page\".\"object\"** as CSS or XPath selector)\n- `I switch to ... frame from ... page` - Switch the context to iframe (provided in **object** from **page** as CSS or XPath selector)\n- `I switch to \"...\".\"...\" non angular frame` - Switch the context to non angular iframe (provided in **\"page\".\"object\"** as CSS or XPath selector)\n- `I switch to ... non angular frame from ... page` - Switch the context to non angular iframe (provided in **object** from **page** as CSS or XPath selector)\n- `I switch to default frame` - Switch the context back to default (initial) frame\n- `I execute \"...\"` - Execute script (JavaScript code) provided in \"\" as a string\n- `I open new tab` - Open new empty tab (via injecting a link with target=\"_blank\" to the current page and clicking it) and switch the context to this new tab\n- `I close current tab` - Close current tab and switch the context to the last active tab/window\n- `I switch to first tab` - Switch the context to the first tab/window\n- `I switch to last tab` - Switch the context to the last tab/window\n- `I accept browser alert` - Accept (OK) browser alert\n- `I dismiss browser alert` - Dismiss (Cancel) browser alert\n- `I authenticate in browser alert with login \"...\" and password \"...\"` - Authenticate in browser alert with login and password (provided in \"\" as strings)\n\n### Then steps\n- `the title should be \"...\"` - Verify that title of the current browser window/tab equals to the text (provided in \"\" as a string)\n- `\"...\".\"...\" should be present` - Verify that element (provided in **\"page\".\"object\"** as CSS or XPath selector) is present on the page\n- `... from ... page should be present` - Verify that element (provided in **object** from **page** as CSS or XPath selector) is present on the page\n- `\"...\".\"...\" should not be present` - Verify that element (provided in **\"page\".\"object\"** as CSS or XPath selector) is not present on the page\n- `... from ... page should not be present` - Verify that element (provided in **object** from **page** as CSS or XPath selector) is not present on the page\n- `\"...\".\"...\" text should be \"...\"` - Verify that text of the element (provided in **\"page\".\"object\"** as CSS or XPath selector) equals to the text (provided in \"\" as a string)\n- `... text from ... page should be \"...\"` - Verify that text of the element (provided in **object** from **page** as CSS or XPath selector) equals to the text (provided in \"\" as a string)\n- `\"...\".\"...\" text should be \"...\".\"...\"` - Verify that text of the element (provided in **\"page1\".\"object1\"** as CSS or XPath selector) equals to the text (provided in **\"page2\".\"object2\"**)\n- `... text from ... page should be ... from ... page` - Verify that text of the element (provided in **object1** from **page1** as CSS or XPath selector) equals to the text (provided in **object2** from **page2**)\n- `\"...\".\"...\" text should contain \"...\"` - Verify that text of the element (provided in **\"page\".\"object\"** as CSS or XPath selector) contains the text (provided in \"\" as a string)\n- `... text from ... page should contain \"...\"` - Verify that text of the element (provided in **object** from **page** as CSS or XPath selector) contains the text (provided in \"\" as a string)\n- `\"...\".\"...\" text should contain \"...\".\"...\"` - Verify that text of the element (provided in \"page1\".\"object1\" as CSS or XPath selector) contains the text (provided in \"page2\".\"object2\")\n- `URL should be \"...\"` - Verify that URL of the current page equals to the text (provided in \"\" as a string)\n- `URL should match /.../` - Verify that URL of the current page matches the regular expression pattern (provided inside // like: /pattern/)\n- `URL should contain \"...\"` - Verify that URL of the current page contains the text (provided in \"\" as a string)\n- `the file \"...\" is empty` - Verify that the file (with name provided in \"\" as a string) is empty\n\n## How to comment out a line in the feature file\nYou can add comments in `.feature` files using `#` for single line comments.\nMultiline (or block) comments are not supported in Gherkin out of the box (see\nhttps://github.com/cucumber/gherkin/issues/203), so you have to prefix all lines\nwith `#` like this:\n\n```\n# Test single line comment 1\n# Test single line comment 2\nScenario: Commit to open source should be joyful\n  When I commit\n  Then I get a star\n  # And a commented out step\n```\n\n## Contributing\nYou are welcome to contribute - please see\n[CONTRIBUTING.md](https://github.com/Marketionist/protractor-cucumber-steps/blob/master/CONTRIBUTING.md)\nto help you get started\n\n## Thanks\nIf this plugin was helpful for you, please give it a **★ Star** on\n[Github](https://github.com/Marketionist/protractor-cucumber-steps)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/Marketionist/protractor-cucumber-steps.git"
  },
  "scripts": {
    "lint": "eslint *.js tests/**/*.js",
    "major": "npm version major -m \"Bumped up package version to %s\" && git push && git push origin --tags && npm publish",
    "minor": "npm version minor -m \"Bumped up package version to %s\" && git push && git push origin --tags && npm publish",
    "patch": "npm version patch -m \"Bumped up package version to %s\" && git push && git push origin --tags && npm publish",
    "postinstall": "webdriver-manager update",
    "test": "protractor tests/protractor.conf.js"
  },
  "version": "1.3.1"
}
